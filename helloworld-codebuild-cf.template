{
    "Description": "Effective DevOps in AWS: CodeBuild - Helloworld container",
    "Resources": {
        "CodeBuild": {
            "Properties": {
                "Artifacts": {
                    "Name": "output",
                    "Type": "CODEPIPELINE"
                },
                "Environment": {
                    "ComputeType": "BUILD_GENERAL1_SMALL",
                    "EnvironmentVariables": [
                        {
                            "Name": "REPOSITORY_NAME",
                            "Value": "helloworld"
                        },
                        {
                            "Name": "REPOSITORY_URI",
                            "Value": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ".dkr.ecr.",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ".amazonaws.com",
                                        "/",
                                        "helloworld"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Image": "aws/codebuild/docker:1.12.1",
                    "Type": "LINUX_CONTAINER"
                },
                "Name": "HelloWorldContainer",
                "ServiceRole": {
                    "Ref": "ServiceRole"
                },
                "Source": {
                    "BuildSpec": "version: 0.2\nphases:\n  pre_build:\n    commands:\n      - apt-get -y install unzip curl\n      - curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n      - unzip awscli-bundle.zip\n      - ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n      - echo \"da4c0be6-81f4-413f-bb15-e7dd5cf29f4f\" > /tmp/execution_id.txt\n      - aws codepipeline get-pipeline-execution --pipeline-name \"helloworld-codepipeline-HelloWorldPipeline-1WB7IKJB8OTRM\" --pipeline-execution-id $(cat /tmp/execution_id.txt) --query 'pipelineExecution.artifactRevisions[0].revisionId' --output=text > /tmp/tag.txt\n      - printf \"%s:%s\" \"713832673520.dkr.ecr.us-east-1.amazonaws.com/helloworld\" \"$(cat /tmp/tag.txt)\" > /tmp/build_tag.txt\n      - printf '{\"tag\":\"%s\"}' \"$(cat /tmp/tag.txt)\" > /tmp/build.json\n      - $(aws ecr get-login)\n  build:\n    commands:\n      - docker build -t \"$(cat /tmp/build_tag.txt)\" .\n  post_build:\n    commands:\n      - docker push \"$(cat /tmp/build_tag.txt)\"\n      - aws ecr batch-get-image --repository-name helloworld --image-ids imageTag=\"$(cat /tmp/tag.txt)\" --query 'images[].imageManifest' --output text | tee /tmp/latest_manifest.json\n      - aws ecr put-image --repository-name helloworld --image-tag latest --image-manifest \"$(cat /tmp/latest_manifest.json)\"\nartifacts:\n  files: /tmp/build.json\n  discard-paths: yes\n",
                    "Type": "CODEPIPELINE"
                }
            },
            "Type": "AWS::CodeBuild::Project"
        },
        "ServiceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codebuild.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess",
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
